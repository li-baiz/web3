package l2

import (
	"context"
	"crypto/ecdsa" // 用于椭圆曲线数字签名算法（ECDSA）
	"fmt"
	ethereum "github.com/ethereum/go-ethereum" // 提供以太坊核心功能
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"     // 提供以太坊地址和哈希类型
	"github.com/ethereum/go-ethereum/core/types" // 提供以太坊交易类型
	"github.com/ethereum/go-ethereum/crypto"     // 提供以太坊加密相关功能
	"github.com/ethereum/go-ethereum/ethclient"  // 提供以太坊客户端功能
	"log"
	"math/big"
	"time"
)

// 合约的字节码（编译后的合约代码）
const (
	contractBytecode = "608060405234801561000f575f80fd5b5060405161087538038061087583398181016040528101906100319190610193565b805f908161003f91906103e7565b50506104b6565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6100a58261005f565b810181811067ffffffffffffffff821117156100c4576100c361006f565b5b80604052505050565b5f6100d6610046565b90506100e2828261009c565b919050565b5f67ffffffffffffffff8211156101015761010061006f565b5b61010a8261005f565b9050602081019050919050565b8281835e5f83830152505050565b5f610137610132846100e7565b6100cd565b9050828152602081018484840111156101535761015261005b565b5b61015e848285610117565b509392505050565b5f82601f83011261017a57610179610057565b5b815161018a848260208601610125565b91505092915050565b5f602082840312156101a8576101a761004f565b5b5f82015167ffffffffffffffff8111156101c5576101c4610053565b5b6101d184828501610166565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061022857607f821691505b60208210810361023b5761023a6101e4565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261029d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610262565b6102a78683610262565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6102eb6102e66102e1846102bf565b6102c8565b6102bf565b9050919050565b5f819050919050565b610304836102d1565b610318610310826102f2565b84845461026e565b825550505050565b5f90565b61032c610320565b6103378184846102fb565b505050565b5b8181101561035a5761034f5f82610324565b60018101905061033d565b5050565b601f82111561039f5761037081610241565b61037984610253565b81016020851015610388578190505b61039c61039485610253565b83018261033c565b50505b505050565b5f82821c905092915050565b5f6103bf5f19846008026103a4565b1980831691505092915050565b5f6103d783836103b0565b9150826002028217905092915050565b6103f0826101da565b67ffffffffffffffff8111156104095761040861006f565b5b6104138254610211565b61041e82828561035e565b5f60209050601f83116001811461044f575f841561043d578287015190505b61044785826103cc565b8655506104ae565b601f19841661045d86610241565b5f5b828110156104845784890151825560018201915060208501945060208101905061045f565b868310156104a1578489015161049d601f8916826103b0565b8355505b6001600288020188555050505b505050505050565b6103b2806104c35f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c806348f343f31461004357806354fd4d5014610073578063f56256c714610091575b5f80fd5b61005d600480360381019061005891906101d7565b6100ad565b60405161006a9190610211565b60405180910390f35b61007b6100c2565b604051610088919061029a565b60405180910390f35b6100ab60048036038101906100a691906102ba565b61014d565b005b6001602052805f5260405f205f915090505481565b5f80546100ce90610325565b80601f01602080910402602001604051908101604052809291908181526020018280546100fa90610325565b80156101455780601f1061011c57610100808354040283529160200191610145565b820191905f5260205f20905b81548152906001019060200180831161012857829003601f168201915b505050505081565b8060015f8481526020019081526020015f20819055507fe79e73da417710ae99aa2088575580a60415d359acfad9cdd3382d59c80281d48282604051610194929190610355565b60405180910390a15050565b5f80fd5b5f819050919050565b6101b6816101a4565b81146101c0575f80fd5b50565b5f813590506101d1816101ad565b92915050565b5f602082840312156101ec576101eb6101a0565b5b5f6101f9848285016101c3565b91505092915050565b61020b816101a4565b82525050565b5f6020820190506102245f830184610202565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61026c8261022a565b6102768185610234565b9350610286818560208601610244565b61028f81610252565b840191505092915050565b5f6020820190508181035f8301526102b28184610262565b905092915050565b5f80604083850312156102d0576102cf6101a0565b5b5f6102dd858286016101c3565b92505060206102ee858286016101c3565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061033c57607f821691505b60208210810361034f5761034e6102f8565b5b50919050565b5f6040820190506103685f830185610202565b6103756020830184610202565b939250505056fea26469706673582212200d8e62488f884784164b2ce9c93a8a4279c42e5132af02aac5e1abab9874fb3264736f6c634300081a0033"
)

// L2102 是一个结构体，用于组织相关功能
type L2102 struct{}

// L2102 是结构体 L2102 的方法，用于部署智能合约
func (f *L2102) L2102() {
	// 连接到以太坊节点（这里使用的是 Sepolia 测试网，通过 Alchemy 提供的 WebSocket 端点）
	client, err := ethclient.Dial("https://eth-sepolia.g.alchemy.com/v2/UhL_F3NSNomkbZNG9-ko8Zbokug9OCLs")
	if err != nil {
		log.Fatal(err) // 如果连接失败，记录错误并退出程序
	}

	// 从十六进制字符串加载私钥
	privateKey, err := crypto.HexToECDSA("560e54255d4eeb85fdd9f9c08c0e26867c16c67d9db61b9149c3aff3189b3671")
	if err != nil {
		log.Fatal(err) // 如果加载私钥失败，记录错误并退出程序
	}

	// 从私钥中提取公钥
	publicKey := privateKey.Public()
	// 将公钥断言为 *ecdsa.PublicKey 类型
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("error casting public key to ECDSA") // 如果断言失败，记录错误并退出程序
	}

	// 从公钥生成以太坊地址
	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)

	// 获取发送地址的当前 nonce（交易计数）
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		log.Fatal(err) // 如果获取 nonce 失败，记录错误并退出程序
	}
	// nonce = 34

	// 获取当前建议的 Gas 价格
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		log.Fatal(err) // 如果获取 Gas 价格失败，记录错误并退出程序
	}

	// 解码合约字节码
	/*data, err := hex.DecodeString(contractBytecode)
	if err != nil {
		log.Fatal(err) // 如果解码失败，记录错误并退出程序
	}*/

	encodedArgs, err := encodeConstructorArgs("3.0")
	if err != nil {
		log.Fatal(err)
	}

	data := append(common.FromHex(contractBytecode), encodedArgs...)

	// 创建合约部署交易
	// tx := types.NewContractCreation(nonce, big.NewInt(0), 3000000, big.NewInt(0).Add(gasPrice, big.NewInt(int64(30000000000))), data)
	tx := types.NewContractCreation(nonce, big.NewInt(0), 100000, gasPrice, data)

	// 获取当前网络的 ChainID
	chainID, err := client.NetworkID(context.Background())
	if err != nil {
		log.Fatal(err) // 如果获取 ChainID 失败，记录错误并退出程序
	}

	// 使用私钥对交易进行签名
	signedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), privateKey)
	if err != nil {
		log.Fatal(err) // 如果签名失败，记录错误并退出程序
	}

	// 发送已签名的交易到以太坊网络
	err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		log.Fatal(err) // 如果发送交易失败，记录错误并退出程序
	}

	// 打印已发送交易的哈希值
	fmt.Printf("Transaction sent: %s\n", signedTx.Hash().Hex())

	// 等待交易被挖矿，并获取交易收据
	receipt, err := waitForReceipt(client, signedTx.Hash())
	if err != nil {
		log.Fatal(err) // 如果等待交易失败，记录错误并退出程序
	}

	// 打印合约部署地址
	fmt.Printf("Contract deployed at: %s\n", receipt.ContractAddress.Hex())
}

// waitForReceipt 等待交易被挖矿，并返回交易收据
func waitForReceipt(client *ethclient.Client, txHash common.Hash) (*types.Receipt, error) {
	for {
		// 查询交易收据
		receipt, err := client.TransactionReceipt(context.Background(), txHash)
		if err == nil {
			return receipt, nil // 如果交易收据存在，返回收据
		}
		if err != ethereum.NotFound {
			return nil, err // 如果发生其他错误，返回错误
		}
		// 等待一段时间后再次查询
		time.Sleep(1 * time.Second)
	}
}

func encodeConstructorArgs(name string) ([]byte, error) {
	arguments := abi.Arguments{
		{Type: mustNewType("string")},
	}
	return arguments.Pack(name)
}

func mustNewType(typeStr string) abi.Type {
	typ, err := abi.NewType(typeStr, "", nil)
	if err != nil {
		panic(err)
	}
	return typ
}
